<groups>
    <!-- Selects ex01_module from my_universe package -->
    <group name="gp1">
        <pickers>
            <picker type="cm" pattern=".*_picking"/>
        </pickers>
    </group>

    <!-- Selects test1_picking and test2_picking from my_universe package -->
    <group name="gp2">
        <pickers>
            <picker type="cf" pattern=".*_picking"/>
        </pickers>
    </group>

    <!-- Selects test_picking from ex0_picking module from my_universe package -->
    <group name="gp3">
        <pickers>
            <picker type="cm" pattern=".*ex01_picking"/>
            <picker type="cf" pattern="test1_picking"/>
        </pickers>
    </group>

    <!-- Demonstration of different value comparison rules for built-in properties.
    There is an and relationship among rules -->
    <!-- Use exclude rule for negation of a condition -->
    <!-- You can define rules for test modules and/or functions-->
    <group name="gp4">
        <pickers>
            <picker type="cm" pattern=".*ex03_rules"/>
        </pickers>

        <rules>
            <functions>
                <!-- Example of string property -->
                <include if="author is Rahul Verma"/>
                <include if="author eq Rahul Verma"/>
                <include if="author = Rahul Verma"/>
                <include if="author == Rahul Verma"/>
                <include if="author matches Rahul VERMA"/>
                <include if="author ~= Rahul VERMA"/>
                <include if="author contains Rahul VERMA"/>
                <include if="author *= RaHuL"/>

                <!-- Example of int property.-->
                <!-- matches, contains and corresponding symbols are not allowed. -->
                <!-- Default priority is 5. Lower the number, higher the priority -->
                <include if="priority is 2"/>
                <include if="priority eq 2"/>
                <include if="priority = 2"/>
                <include if="priority == 2"/>
                <include if="priority lt 3"/>
                <include if="priority gt 1"/>
                <include if="priority le 2"/>
                <include if="priority ge 2"/>
            </functions>
        </rules>
    </group>

    <!-- Demonstration of is defined/present (explicit declaration and non-None value assignment) rule for built-in property-->
    <group name="gp5">
        <pickers>
            <picker type="cm" pattern=".*ex03_rules"/>
        </pickers>

        <rules>
            <functions>
                <include if="author is defined"/>
                <include if="author is present"/>
            </functions>
        </rules>
    </group>

    <!-- Demonstration of is None - Run tests where a property is not set.-->
    <group name="gp6">
        <pickers>
            <picker type="cm" pattern=".*ex03_rules"/>
        </pickers>

        <rules>
            <functions>
                <include if="author is None"/>
                <include if="abc is None"/>
            </functions>
        </rules>
    </group>

    <!-- Demonstration of user-defined property. You can use other rules seen earlier as well. -->
    <group name="gp7">
        <pickers>
            <picker type="cm" pattern=".*ex03_rules"/>
        </pickers>

        <rules>
            <functions>
                <include if="rating is 5"/>
                <include if="rating gt 4"/>
                <include if="something is cooking"/>
                <include if="give_up is False"/>
            </functions>
        </rules>
    </group>

    <!-- Demonstration of short-rule format for boolean built-in property rule  and other boolean constructs.-->
    <group name="gp8">
        <pickers>
            <picker type="cm" pattern=".*ex03_rules"/>
        </pickers>

        <rules>
            <functions>
                <!-- A shorter concise version -->
                <include if="unstable"/>
                <!-- Works the usual way as well -->
                <include if="unstable is True"/>

                <!-- Boolean values have special values -->
                <!-- true/on/1 mean True and false/off/0 mean False (Case insensitive) -->
                <include if="unstable is On"/>
                <include if="unstable is 1"/>
                <include if="unstable = yes"/>

            </functions>
        </rules>
    </group>

    <!-- Demonstration of evar rule. You can use all constructs as earlier.-->
    <group name="gp9">
        <pickers>
            <picker type="cm" pattern=".*ex03_rules"/>
        </pickers>

        <rules>
            <functions>
                <!-- Works the usual way as well -->
                <include if="evar myvar is defined"/>
                <include if="evar myvar is testing"/>
            </functions>
        </rules>
    </group>

    <!-- Demonstration of mulit evar rule-->
    <group name="gp10">
        <pickers>
            <picker type="cm" pattern=".*ex03_rules"/>
        </pickers>

        <rules>
            <functions>
                <!-- Works the usual way as well -->
                <include if="evar myvar is testing"/>
                <include if="evar myvar2 is 20"/>
                <include if="evar myvar3 is True"/>

            </functions>
        </rules>
    </group>

    <!-- Demonstration of tag rules-->
    <group name="gp11">
        <pickers>
            <picker type="cm" pattern=".*ex03_rules"/>
        </pickers>

        <rules>
            <functions>
                <!-- Works the usual way as well -->
                <include if="tag chrome is defined"/>
                <include if="tag chrome is present"/>
                <include if="tagged chrome"/>
            </functions>
        </rules>
    </group>

    <!-- Demonstration of multi-tag rules-->
    <group name="gp12">
        <pickers>
            <picker type="cm" pattern=".*ex03_rules"/>
        </pickers>

        <rules>
            <functions>
                <!-- Works the usual way as well -->
                <include if="tags chrome,firefox are defined"/>
                <include if="tags chrome,firefox are present"/>

                <!-- Special syntax for tags -->
                <include if="tagged chrome, firefox"/>
            </functions>
        </rules>
    </group>

    <!-- Demonstration of single bug rules-->
    <group name="gp13">
        <pickers>
            <picker type="cm" pattern=".*ex03_rules"/>
        </pickers>

        <rules>
            <functions>
                <include if="bug b1 is defined"/>
                <include if="bug b1 is present"/>
            </functions>
        </rules>
    </group>

    <!-- Demonstration of multi-bug rules-->
    <group name="gp14">
        <pickers>
            <picker type="cm" pattern=".*ex03_rules"/>
        </pickers>

        <rules>
            <functions>
                <!-- Works the usual way as well -->
                <include if="bugs b1,b2 are defined"/>
                <include if="bugs b1,b2 are present"/>
            </functions>
        </rules>
    </group>

    <group name="gpc1">
        
        <fixtures>
            <fixture type="init_group" module="all" func="init_gp1"/>
            <fixture type="end_group" module="all" func="end_gp1"/>
            <fixture type="init_each_module" module="all" func="init_each_module"/>
            <fixture type="end_each_module" module="all" func="end_each_module"/>
        </fixtures>

        <pickers>
            <picker type="cm" pattern=".*gp1"/>
            <picker type="cf" pattern=".*func2"/>
        </pickers>
    </group>

    <group name="gpc2">

        <pickers>
            <picker type="cm" pattern=".*gp2"/>
            <picker type="cf" pattern=".*func1"/>
        </pickers>
    </group>

    <group name="cf1">
        <pickers>
            <picker type="cm" pattern=".*s01.*ep14.*ex01.*"/>
        </pickers>
                    <config>
                <arjuna_option name="browser.name" value="firefox"/>
            </config>
    </group>

</groups>